% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/val_prob_mi.R
\name{val.prob.mi}
\alias{val.prob.mi}
\title{val.prob.mi}
\usage{
val.prob.mi(lp.mi, y, g = 5, main = "", dist = FALSE, smoothed.curve = TRUE)
}
\arguments{
\item{lp.mi}{Matrix with linear predictor for imputation i in columns (complete case analysis: one column)}

\item{y}{Outcome indicator, 1 if event, 0 otherwise}

\item{g}{Number of risk groups; default=5}

\item{main}{Plot label, default=""}

\item{dist}{distribution, default=TRUE}

\item{smoothed.curve}{indicate if you want to plot the smoothed curve through the quantiles}
}
\value{
The output of the val_prob_mi function is a "list" with the following components.

main

Main title of plots.


n

number of observations


quants

quantiles


p.mi

predicted probabilities for each imputed data set.


obs.mi

observed probabilities for each imputed data set.


obs.mi.lower

lower bound of 95% confidence interval of observed probabilities.


obs.mi.upper

upper bound of 95% confidence interval of observed probabilities.


int

intercept


int.lower

lower bound of 95% confidence interval of intercept.


int.upper

upper bound of 95% confidence interval of intercept.


slope

slope estimate


slope.lower

lower bound of 95% confidence interval of slope.


slope.upper

upper bound of 95% confidence interval of slope.


cindex

C-index


cindex.lower

lower bound of 95% confidence interval of C-index.

cindex.upper

upper bound of 95% confidence interval of C-index.


mb.c

Model-based concordance.


e.avg

E-average.


e.90

E-90
}
\description{
This function calculates intercept, slope, and C-index for outcome risk predictions of multiple imputed data set(s).
}
\examples{
library(PredictionTools)
set.seed(1)
n <- 100
m <- 5 # number of imputations
lp.val <- matrix(rnorm(n*m, 0, 1), n, m)
y.val <- rbinom(n, 1, 0.5)
g <- 4
main <- "Plot label"
dist <- TRUE
smoothed.curve <- TRUE
PredictionTools::val.prob.mi(lp.mi=lp.val, y=y.val, g=g, main=main,
                              dist=dist, smoothed.curve=smoothed.curve)
}
